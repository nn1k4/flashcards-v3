// src/utils/retry.ts
// Retry-—É—Ç–∏–ª–∏—Ç—ã: —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff + –ø—Ä–æ—Å—Ç–∞—è –æ—á–µ—Ä–µ–¥—å —Ä–µ—Ç—Ä–∞–µ–≤.
// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è, —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å –ø–ª–∞–Ω–æ–º; –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ —É–≥–ª—É–±–∏—Ç—å.

import { isRetryableError } from '../api/client';

export type RetryConfig = {
  maxAttempts: number;
  baseDelay: number;
  maxDelay: number;
  backoffFactor: number;
  jitter: boolean;
};

export const DEFAULT_RETRY_CONFIG: RetryConfig = {
  maxAttempts: 3,
  baseDelay: 1000,
  maxDelay: 10_000,
  backoffFactor: 2,
  jitter: true,
};

/** –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff —Å jitter */
function nextDelay(attempt: number, cfg: RetryConfig): number {
  const exp = cfg.baseDelay * Math.pow(cfg.backoffFactor, attempt - 1);
  const capped = Math.min(exp, cfg.maxDelay);
  if (!cfg.jitter) return capped;
  const jitter = Math.random() * 0.25 + 0.75; // 75%-125%
  return Math.floor(capped * jitter);
}

/** –û–±—ë—Ä—Ç–∫–∞ retry —Å backoff –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º retryable-–æ—à–∏–±–æ–∫ */
export async function withRetry<T>(
  operation: () => Promise<T>,
  config: Partial<RetryConfig> = {},
  operationName: string = 'operation'
): Promise<T> {
  const cfg: RetryConfig = { ...DEFAULT_RETRY_CONFIG, ...config };
  let lastErr: unknown;

  for (let attempt = 1; attempt <= cfg.maxAttempts; attempt++) {
    try {
      // console.debug(`üîÑ ${operationName}: attempt ${attempt}/${cfg.maxAttempts}`);
      return await operation();
    } catch (e) {
      lastErr = e;
      if (!isRetryableError(e) || attempt === cfg.maxAttempts) break;
      await new Promise((r) => setTimeout(r, nextDelay(attempt, cfg)));
    }
  }

  throw (lastErr instanceof Error ? lastErr : new Error('withRetry failed'));
}

/**
 * –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –æ—á–µ—Ä–µ–¥—å —Ä–µ—Ç—Ä–∞–µ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ SID.
 * –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º—ã –ª–∏—à—å —Ö—Ä–∞–Ω–∏–º –∑–∞–¥–∞—á–∏ –∏ –ø–æ–º–µ—á–∞–µ–º –∏—Ö –Ω–µ—É—Å–ø–µ—à–Ω—ã–º–∏ (–Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ per-SID).
 * –ö–æ–Ω—Ç—Ä–∞–∫—Ç –æ—Å—Ç–∞–≤–ª–µ–Ω —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º: –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É.
 */
export class RetryQueue {
  private q: Array<{ sid: number; lv: string; error: Error }> = [];

  enqueue(sid: number, lv: string, error: Error) {
    this.q.push({ sid, lv, error });
  }

  clear() {
    this.q = [];
  }

  async processQueue(
    _batchId: string,
    onSuccess: (sid: number, result: unknown) => void,
    onFailure: (sid: number, error: Error) => void
  ): Promise<void> {
    // –ü–∞—Ä–∞–º–µ—Ç—Ä –∏—Å–ø–æ–ª—å–∑—É–µ–º, —á—Ç–æ–±—ã —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å TS noUnusedParameters –¥–∞–∂–µ –µ—Å–ª–∏ —É—Å–ø–µ—Ö–æ–≤ –Ω–µ—Ç
    void onSuccess;

    // –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ API –¥–ª—è —Ä–µ—Ç—Ä–∞—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö SID ‚Äî —Å—á–∏—Ç–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –Ω–µ—É—Å–ø–µ—à–Ω—ã–º–∏
    for (const item of this.q) {
      onFailure(item.sid, item.error);
    }
    this.clear();
  }
}
